{"version":3,"sources":["components/NavBarLink/NavBarLink.tsx","components/NavBar/NavBar.tsx","App.tsx","pages/HomePage/HomePage.tsx","pages/NotFoundPage/NotFoundPage.tsx","api/api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage/PeoplePage.tsx","index.tsx"],"names":["NavBarLink","to","text","className","isActive","classNames","NavBar","role","App","HomePage","NotFoundPage","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","memo","person","name","sex","slug","PeopleTable","people","selectedSlug","map","personage","born","died","father","mother","fatherName","motherName","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasError","setHasError","useParams","isNoPeople","length","isPeople","getUser","peopleFromServer","find","updatePeople","individuals","loadPeople","useCallback","useEffect","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.fe8b1dfa.chunk.js","sourcesContent":["import { FC } from 'react';\nimport classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const NavBarLink: FC<Props> = ({\n  to,\n  text,\n}) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => classNames(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    )}\n  >\n    {text}\n  </NavLink>\n);\n","import { FC } from 'react';\nimport { NavBarLink } from '../NavBarLink';\n\nexport const NavBar: FC = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavBarLink\n            to=\"/\"\n            text=\"Home\"\n          />\n\n          <NavBarLink\n            to=\"people\"\n            text=\"People\"\n          />\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { FC } from 'react';\nimport { Outlet } from 'react-router-dom';\n\nimport './App.scss';\n\nimport { NavBar } from './components/NavBar';\n\nexport const App: FC = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { FC } from 'react';\n\nexport const HomePage: FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { FC } from 'react';\n\nexport const NotFoundPage: FC = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { Person } from '../types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: FC<Props> = memo(({ person }) => {\n  const {\n    name,\n    sex,\n    slug,\n  } = person;\n\n  return (\n    <Link\n      to={`../${slug}`}\n      className={classNames(\n        { 'has-text-danger': sex === 'f' },\n      )}\n    >\n      {name}\n    </Link>\n  );\n});\n","import { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  people: Person[];\n  selectedSlug: string;\n};\n\nexport const PeopleTable: FC<Props> = memo(({\n  people,\n  selectedSlug,\n}) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => {\n          const {\n            sex,\n            born,\n            died,\n            father,\n            mother,\n            fatherName,\n            motherName,\n          } = person;\n\n          const isSelected = (personage: Person) => (\n            personage.slug === selectedSlug\n          );\n\n          return (\n            <tr\n              data-cy=\"person\"\n              className={classNames({\n                'has-background-warning': isSelected(person),\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n\n              <td>\n                {mother\n                  ? <PersonLink person={mother} />\n                  : motherName || '-'}\n              </td>\n\n              <td>\n                {father\n                  ? <PersonLink person={father} />\n                  : fatherName || '-'}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n});\n","import {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\n\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../../api/api';\nimport { Loader } from '../../components/Loader';\nimport { PeopleTable } from '../../components/PeopleTable';\nimport { Person } from '../../types';\n\nexport const PeoplePage: FC = memo(() => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const { selectedSlug = '' } = useParams();\n\n  const isNoPeople = !people.length && !isLoading && !hasError;\n  const isPeople = !!people.length && !isLoading;\n\n  const getUser = (name: string | null, peopleFromServer: Person[]) => {\n    const foundUser = peopleFromServer.find((person) => person.name === name);\n\n    return foundUser;\n  };\n\n  const updatePeople = (individuals: Person[]) => (\n    individuals.map((person) => ({\n      ...person,\n      father: getUser(person.fatherName, individuals),\n      mother: getUser(person.motherName, individuals),\n    }))\n  );\n\n  const loadPeople = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      const response = await getPeople();\n\n      setPeople(updatePeople(response));\n    } catch (error) {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {hasError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {isNoPeople && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {isPeople && (\n            <PeopleTable\n              people={people}\n              selectedSlug={selectedSlug}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n});\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\nimport { PeoplePage } from './pages/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":selectedSlug\" element={<PeoplePage />} />\n          </Route>\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}